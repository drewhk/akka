/**
 * Copyright (C) 2014-2015 Typesafe Inc. <http://www.typesafe.com>
 */
package akka.stream.scaladsl

import scala.collection.immutable
import akka.actor.Props
import akka.stream.MaterializerSettings
import akka.stream.impl.GenJunctions._
import akka.stream.scaladsl.FlowGraph.FlowGraphBuilder
import akka.stream.scaladsl.Graphs.{ InPort, OutPort, Ports }

[2..19#object ZipWith1 {

  final case class ZipWith1Ports[[#A1#], O](
    [#in1: InPort[A1], #
    ]out: OutPort[O]) extends Ports {
    override val inlets: immutable.Seq[InPort[_]] = List([#in1#])
    override val outlets: immutable.Seq[OutPort[_]] = List(out)

    override def deepCopy(): ZipWith1Ports[[#A1#], O] =
      ZipWith1Ports(
        [#new InPort(in1.toString), #
        ]new OutPort(out.toString))
  }

  def apply[[#A1#], O](zipper: ([#A1#]) â‡’ O)(implicit b: FlowGraphBuilder): ZipWith1Ports[[#A1#], O] = {
    val zipWithModule = new ZipWith1Module(
      [#new InPort[A1]("ZipWith1.in1"),#
      ]new OutPort[O]("ZipWith1.out"),
      zipper)
    b.addModule(zipWithModule)
    ZipWith1Ports([#zipWithModule.in1#], zipWithModule.out)
  }
}#
]
